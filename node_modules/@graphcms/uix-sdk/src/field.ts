import type {
  FormState,
  FieldState,
  FieldSubscription,
  Subscriber,
  FormSubscription,
} from './type-helpers/form';

import type {
  IExtensionDeclaration,
  ConfigFields,
  ExtensionPropsBase,
} from './base';

export enum FieldExtensionType {
  STRING = 'STRING',
  RICHTEXT = 'RICHTEXT',
  INT = 'INT',
  FLOAT = 'FLOAT',
  BOOLEAN = 'BOOLEAN',
  JSON = 'JSON',
  DATETIME = 'DATETIME',
  DATE = 'DATE',
  LOCATION = 'LOCATION',
  COLOR = 'COLOR',
  ENUMERATION = 'ENUMERATION',
  RELATION = 'RELATION',
  ASSET = 'ASSET',
  UNION = 'UNION',
}

export enum FieldExtensionFeature {
  FieldRenderer = 'FieldRenderer',
  ListRenderer = 'ListRenderer',
  TableRenderer = 'TableRenderer',
}

export enum VisibilityTypes {
  /** Field can be read and edited */
  READ_WRITE = 'READ_WRITE',
  /** Field is shown but can't be edited in the UI, only through the API */
  READ_ONLY = 'READ_ONLY',
  /** Field is not shown, but can be used by other fields */
  HIDDEN = 'HIDDEN',
}

export type VisibilityMap = { [fieldApiId: string]: VisibilityTypes };
export interface Asset {
  createdAt: string;
  fileName: string;
  handle: string;
  height?: number;
  id: string;
  mimeType?: string;
  size?: number;
  updatedAt: string;
  url: string;
  width?: number;
}

export interface FieldExtensionDeclaration extends IExtensionDeclaration {
  extensionType: 'field';
  fieldType: FieldExtensionType;
  /**
   * Extension capabilities
   */
  features: FieldExtensionFeature[];
  fieldConfig?: ConfigFields;
  listConfig?: ConfigFields;
  tableConfig?: ConfigFields;
}

export interface FieldExtensionProps extends ExtensionPropsBase {
  // name of the field in the form (may differ from the field apiId, ie. for localized fields)
  name: string;

  // current locale on localized field
  locale?: string;

  // current entry id, null for new entries;
  entryId: string | null;

  isTableCell: boolean;

  isReadOnly?: boolean;

  value: any;

  onBlur: (event?: FocusEvent) => Promise<void>;

  onChange: (event: InputEvent) => Promise<void>;

  onFocus: (event?: FocusEvent) => Promise<void>;

  // @see https://final-form.org/docs/react-final-form/types/FieldRenderProps
  meta: {
    active: boolean;
    error: any;
    touched: boolean;
  };

  /**
   * @deprecated use `expand` instead
   */
  expandField?: (expand: boolean) => unknown;

  openAssetPicker: () => Promise<null | (Asset & Record<string, unknown>)>;

  form: {
    change: <Value = any>(name: string, value: Value) => Promise<void>;
    getState: <Values = Record<string, any>>() => Promise<FormState<Values>>;
    getFieldState: <Value = any>(
      fieldName: string
    ) => Promise<FieldState<Value>>;
    subscribeToFieldState: <Value = any>(
      name: string,
      callback: (state: FieldState<Value>) => any,
      subscription: FieldSubscription
    ) => Promise<() => any>;
    subscribeToFormState: <Values = Record<string, any>>(
      callback: Subscriber<FormState<Values>>,
      subscription: FormSubscription
    ) => Promise<() => any>;
  };
  field: {
    id: string;
    apiId: string;
    description: string | null;
    displayName: string;
    isList: boolean;
    isLocalized?: boolean;
    isRequired?: boolean;
    isUnique?: boolean;
    type: FieldExtensionType;
  };
  model: {
    apiId: string;
    apiIdPlural: string;
    id: string;
    description: string | null;
    displayName: string;
    isLocalized: boolean;
  };
  setFieldsVisibility: (
    arg:
      | VisibilityMap
      | ((currentVisibilityMap: VisibilityMap) => VisibilityMap)
  ) => void;
  /**
   * Saved instance config of the following shape
   * `{ [key in FieldExtensionDeclaration['fieldConfig']]: value }`
   */
  fieldConfig?: Record<string, boolean | number | string | undefined | null>;
  tableConfig?: Record<string, boolean | number | string | undefined | null>;
}
