// see https://github.com/krakenjs/zoid/blob/master/src/component/props.js#L53
export const reservedExtensionProps = [
  'timeout',
  'window',
  'close',
  'focus',
  'resize',
  'uid',
  'cspNonce',
  'getParent',
  'getParentDomain',
  'hide',
  'show',
  'export',
  'onDisplay',
  'onRendered',
  'onRender',
  'onClose',
  'onDestroy',
  'onResize',
  'onFocus',
  'onError',
  'onProps',
];

export enum ExtensionPermission {
  INPUT = 'INPUT',
  FORM = 'FORM',
  API = 'API',
}

export interface IExtensionDeclaration {
  name: string;
  description?: string;
  permissions?: ExtensionPermission[];
  config?: Record<ConfigVariableName, ConfigVariableSettings>;
}

type ConfigVariableName = string;

type ConfigVariableSettings = {
  type: 'string' | 'number' | 'boolean';
  displayName?: string;
  description?: string;
  required?: boolean;
  defaultValue?: any;
};

export type ConfigFields = Record<ConfigVariableName, ConfigVariableSettings>;

export interface ExtensionPropsBase {
  extension: {
    config: Record<string, any>;
    status: 'connected' | 'connecting' | 'error' | 'disconnected';
  };
  isExpanded: boolean;
  expand: (expand: boolean | ((isExpanded: boolean) => boolean)) => unknown;
  context: {
    project: {
      id: string;
      name: string;
      mgmtApi: string;
      mgmtToken: string;
    };
    environment: {
      id: string;
      name: string;
      endpoint: string;
      authToken: string;
    };
  };

  openDialog: <DialogReturn = any, DialogProps = Record<string, any>>(
    src: string,
    props?: {
      disableOverlayClick?: boolean;
      maxWidth?: string;
      ariaLabel?: string;
    } & DialogProps
  ) => Promise<DialogReturn | null>;
}

export interface ExtensionDialogProps extends ExtensionPropsBase {
  onCloseDialog: (value: any) => void;
}
