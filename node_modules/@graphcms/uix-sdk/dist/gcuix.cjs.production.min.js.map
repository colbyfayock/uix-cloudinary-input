{"version":3,"file":"gcuix.cjs.production.min.js","sources":["../src/base.ts","../src/field.ts","../src/index.ts"],"sourcesContent":["// see https://github.com/krakenjs/zoid/blob/master/src/component/props.js#L53\nexport const reservedExtensionProps = [\n  'timeout',\n  'window',\n  'close',\n  'focus',\n  'resize',\n  'uid',\n  'cspNonce',\n  'getParent',\n  'getParentDomain',\n  'hide',\n  'show',\n  'export',\n  'onDisplay',\n  'onRendered',\n  'onRender',\n  'onClose',\n  'onDestroy',\n  'onResize',\n  'onFocus',\n  'onError',\n  'onProps',\n];\n\nexport enum ExtensionPermission {\n  INPUT = 'INPUT',\n  FORM = 'FORM',\n  API = 'API',\n}\n\nexport interface IExtensionDeclaration {\n  name: string;\n  description?: string;\n  permissions?: ExtensionPermission[];\n  config?: Record<ConfigVariableName, ConfigVariableSettings>;\n}\n\ntype ConfigVariableName = string;\n\ntype ConfigVariableSettings = {\n  type: 'string' | 'number' | 'boolean';\n  displayName?: string;\n  description?: string;\n  required?: boolean;\n  defaultValue?: any;\n};\n\nexport type ConfigFields = Record<ConfigVariableName, ConfigVariableSettings>;\n\nexport interface ExtensionPropsBase {\n  extension: {\n    config: Record<string, any>;\n    status: 'connected' | 'connecting' | 'error' | 'disconnected';\n  };\n  isExpanded: boolean;\n  expand: (expand: boolean | ((isExpanded: boolean) => boolean)) => unknown;\n  context: {\n    project: {\n      id: string;\n      name: string;\n      mgmtApi: string;\n      mgmtToken: string;\n    };\n    environment: {\n      id: string;\n      name: string;\n      endpoint: string;\n      authToken: string;\n    };\n  };\n\n  openDialog: <DialogReturn = any, DialogProps = Record<string, any>>(\n    src: string,\n    props?: {\n      disableOverlayClick?: boolean;\n      maxWidth?: string;\n      ariaLabel?: string;\n    } & DialogProps\n  ) => Promise<DialogReturn | null>;\n}\n\nexport interface ExtensionDialogProps extends ExtensionPropsBase {\n  onCloseDialog: (value: any) => void;\n}\n","import type {\n  FormState,\n  FieldState,\n  FieldSubscription,\n  Subscriber,\n  FormSubscription,\n} from './type-helpers/form';\n\nimport type {\n  IExtensionDeclaration,\n  ConfigFields,\n  ExtensionPropsBase,\n} from './base';\n\nexport enum FieldExtensionType {\n  STRING = 'STRING',\n  RICHTEXT = 'RICHTEXT',\n  INT = 'INT',\n  FLOAT = 'FLOAT',\n  BOOLEAN = 'BOOLEAN',\n  JSON = 'JSON',\n  DATETIME = 'DATETIME',\n  DATE = 'DATE',\n  LOCATION = 'LOCATION',\n  COLOR = 'COLOR',\n  ENUMERATION = 'ENUMERATION',\n  RELATION = 'RELATION',\n  ASSET = 'ASSET',\n  UNION = 'UNION',\n}\n\nexport enum FieldExtensionFeature {\n  FieldRenderer = 'FieldRenderer',\n  ListRenderer = 'ListRenderer',\n  TableRenderer = 'TableRenderer',\n}\n\nexport enum VisibilityTypes {\n  /** Field can be read and edited */\n  READ_WRITE = 'READ_WRITE',\n  /** Field is shown but can't be edited in the UI, only through the API */\n  READ_ONLY = 'READ_ONLY',\n  /** Field is not shown, but can be used by other fields */\n  HIDDEN = 'HIDDEN',\n}\n\nexport type VisibilityMap = { [fieldApiId: string]: VisibilityTypes };\nexport interface Asset {\n  createdAt: string;\n  fileName: string;\n  handle: string;\n  height?: number;\n  id: string;\n  mimeType?: string;\n  size?: number;\n  updatedAt: string;\n  url: string;\n  width?: number;\n}\n\nexport interface FieldExtensionDeclaration extends IExtensionDeclaration {\n  extensionType: 'field';\n  fieldType: FieldExtensionType;\n  /**\n   * Extension capabilities\n   */\n  features: FieldExtensionFeature[];\n  fieldConfig?: ConfigFields;\n  listConfig?: ConfigFields;\n  tableConfig?: ConfigFields;\n}\n\nexport interface FieldExtensionProps extends ExtensionPropsBase {\n  // name of the field in the form (may differ from the field apiId, ie. for localized fields)\n  name: string;\n\n  // current locale on localized field\n  locale?: string;\n\n  // current entry id, null for new entries;\n  entryId: string | null;\n\n  isTableCell: boolean;\n\n  isReadOnly?: boolean;\n\n  value: any;\n\n  onBlur: (event?: FocusEvent) => Promise<void>;\n\n  onChange: (event: InputEvent) => Promise<void>;\n\n  onFocus: (event?: FocusEvent) => Promise<void>;\n\n  // @see https://final-form.org/docs/react-final-form/types/FieldRenderProps\n  meta: {\n    active: boolean;\n    error: any;\n    touched: boolean;\n  };\n\n  /**\n   * @deprecated use `expand` instead\n   */\n  expandField?: (expand: boolean) => unknown;\n\n  openAssetPicker: () => Promise<null | (Asset & Record<string, unknown>)>;\n\n  form: {\n    change: <Value = any>(name: string, value: Value) => Promise<void>;\n    getState: <Values = Record<string, any>>() => Promise<FormState<Values>>;\n    getFieldState: <Value = any>(\n      fieldName: string\n    ) => Promise<FieldState<Value>>;\n    subscribeToFieldState: <Value = any>(\n      name: string,\n      callback: (state: FieldState<Value>) => any,\n      subscription: FieldSubscription\n    ) => Promise<() => any>;\n    subscribeToFormState: <Values = Record<string, any>>(\n      callback: Subscriber<FormState<Values>>,\n      subscription: FormSubscription\n    ) => Promise<() => any>;\n  };\n  field: {\n    id: string;\n    apiId: string;\n    description: string | null;\n    displayName: string;\n    isList: boolean;\n    isLocalized?: boolean;\n    isRequired?: boolean;\n    isUnique?: boolean;\n    type: FieldExtensionType;\n  };\n  model: {\n    apiId: string;\n    apiIdPlural: string;\n    id: string;\n    description: string | null;\n    displayName: string;\n    isLocalized: boolean;\n  };\n  setFieldsVisibility: (\n    arg:\n      | VisibilityMap\n      | ((currentVisibilityMap: VisibilityMap) => VisibilityMap)\n  ) => void;\n  /**\n   * Saved instance config of the following shape\n   * `{ [key in FieldExtensionDeclaration['fieldConfig']]: value }`\n   */\n  fieldConfig?: Record<string, boolean | number | string | undefined | null>;\n  tableConfig?: Record<string, boolean | number | string | undefined | null>;\n}\n","import zoid from '@graphcms/zoid/lib/zoid.js';\n\nimport { ExtensionDialogProps, reservedExtensionProps } from './base';\nexport { ExtensionDialogProps, reservedExtensionProps } from './base';\nimport type { FieldExtensionDeclaration, FieldExtensionProps } from './field';\nimport type {\n  FormSidebarExtensionDeclaration,\n  FormSidebarExtensionProps,\n} from './formSidebar';\n\nexport type {\n  FormSidebarExtensionDeclaration,\n  FormSidebarExtensionProps,\n} from './formSidebar';\n\nexport type {\n  FormState,\n  FieldState,\n  FieldSubscription,\n  Subscriber,\n  FormSubscription,\n} from './type-helpers/form';\n\nexport type { FieldExtensionDeclaration, FieldExtensionProps, VisibilityMap } from './field';\n\nexport { FieldExtensionFeature, FieldExtensionType, VisibilityTypes } from './field';\n\nexport type ExtensionProps =\n  | FieldExtensionProps\n  | FormSidebarExtensionProps\n  | ExtensionDialogProps;\n\ntype Xprops = {\n  onProps: (props: Record<string, any>) => void;\n  onConnected: (\n    uid: string,\n    declaration: ExtensionDeclaration\n  ) => Promise<unknown>;\n  resize: (size: {\n    height: 'auto' | 'full' | number;\n    width: 'auto' | '100%' | number;\n  }) => unknown;\n} & ExtensionProps;\n\ndeclare global {\n  interface Window {\n    xprops: Xprops;\n  }\n}\n\nexport type ExtensionDeclaration =\n  | FieldExtensionDeclaration\n  | FormSidebarExtensionDeclaration;\n\nfunction handleProps(props: any) {\n  const transformedProps: any = {};\n  Object.keys(props).forEach((key: string) => {\n    // do not pass down zoid props to the extension\n    if (reservedExtensionProps.includes(key)) return;\n\n    // transform props that were prefixed with '_' to bypass zoid reverved porps\n    if (\n      key.startsWith('_') &&\n      reservedExtensionProps.includes(key.replace(/^_/g, ''))\n    ) {\n      transformedProps[key.replace(/^_/g, '')] = props[key];\n    } else {\n      transformedProps[key] = props[key];\n    }\n  });\n  return transformedProps;\n}\n\nexport type DeclarationRelativeProps<T> = T extends FieldExtensionDeclaration\n  ? FieldExtensionProps\n  : T extends FormSidebarExtensionDeclaration\n  ? FormSidebarExtensionProps\n  : ExtensionProps;\n\nexport function init<Declaration>({\n  debug,\n  declaration,\n  onProps = () => undefined,\n  uid: givenUid,\n}: {\n  declaration: ExtensionDeclaration;\n  onProps: (props: ExtensionProps) => unknown;\n  debug?: boolean;\n  uid?: string;\n}) {\n  return new Promise<\n    | { status: 'ok'; props: DeclarationRelativeProps<Declaration> }\n    | { status: 'validation' }\n  >((resolve, reject) => {\n    if (\n      typeof window === 'undefined' ||\n      typeof window.postMessage === 'undefined'\n    ) {\n      return reject({\n        error: 'unsupported_env',\n        message:\n          'Unsupported environment: Not in a browser supporting PostMessage',\n      });\n    }\n\n    const uid =\n      givenUid ||\n      (typeof URLSearchParams !== 'undefined' &&\n        new URLSearchParams(window.location.search).get('extensionUid'));\n\n    if (!uid) {\n      if (debug)\n        console.error(`[UIX] no uid found in init params or extension URL`);\n      return reject({\n        error: 'missing_uid',\n        message: 'Missing UID: no UID found in init params or extension URL',\n      });\n    }\n    if (debug) console.info(`[UIX:${uid}] initializing with uid ${uid}`);\n\n    zoid.create({\n      tag: uid,\n      url: window.location.href.toString(),\n      autoResize: {\n        width: false,\n        height: true,\n      },\n      props: {\n        onConnected: {\n          type: 'function',\n        },\n      },\n    });\n    if (typeof window.xprops !== 'undefined') {\n      const { onConnected, onProps: initialOnProps } = window.xprops;\n      if (debug) {\n        console.info(`[UIX:${uid}] transmitting declaration`, declaration);\n      }\n      onConnected(uid, declaration).then((status) => {\n        if (status === true) {\n          const {\n            onProps: onParentProps,\n            onConnected: _nevermind,\n            resize,\n            ...extensionProps\n          } = window.xprops;\n\n          if (debug)\n            console.info(`[UIX:${uid}] initial shared props`, extensionProps);\n          onParentProps((p: Xprops) => {\n            const {\n              onProps: onParentProps,\n              onConnected,\n              ...newExtensionProps\n            } = p;\n            if (debug)\n              console.info(`[UIX:${uid}] new shared props`, newExtensionProps);\n            if (typeof p.isExpanded === 'boolean') {\n              p.isExpanded\n                ? resize({ height: 'full', width: '100%' })\n                : resize({ height: 'auto', width: '100%' });\n            }\n            onProps(handleProps(newExtensionProps));\n          });\n\n          if (debug) console.info(`[UIX:${uid}] initialized`);\n          onProps(handleProps(extensionProps));\n          resolve({ status: 'ok', props: handleProps(extensionProps) });\n        } else {\n          if (debug)\n            console.info(`[UIX:${uid}] sdk renderer returned status:`, status);\n          resolve({ status: 'validation' });\n        }\n      });\n    } else {\n      if (debug) console.error(`[UIX] no shared props from host found`);\n      reject({\n        error: 'failed_communication',\n        message:\n          'No communication established with host, please check your URL',\n      });\n    }\n  });\n}\n\nexport default { init };\n"],"names":["ExtensionPermission","FieldExtensionType","FieldExtensionFeature","VisibilityTypes","reservedExtensionProps","handleProps","props","transformedProps","Object","keys","forEach","key","includes","startsWith","replace","init","debug","declaration","onProps","givenUid","uid","Promise","resolve","reject","window","postMessage","error","message","URLSearchParams","location","search","get","console","info","zoid","create","tag","url","href","toString","autoResize","width","height","onConnected","type","xprops","then","status","onParentProps","_nevermind","resize","extensionProps","p","newExtensionProps","isExpanded"],"mappings":"6SAyBYA,ECXAC,EAiBAC,EAMAC,EDpCCC,EAAyB,CACpC,UACA,SACA,QACA,QACA,SACA,MACA,WACA,YACA,kBACA,OACA,OACA,SACA,YACA,aACA,WACA,UACA,YACA,WACA,UACA,UACA,YAGF,SAAYJ,GACVA,gBACAA,cACAA,YAHF,CAAYA,IAAAA,QCXAC,EAAAA,6BAAAA,gDAEVA,sBACAA,YACAA,gBACAA,oBACAA,cACAA,sBACAA,cACAA,sBACAA,gBACAA,4BACAA,sBACAA,gBACAA,iBAGUC,EAAAA,gCAAAA,iEAEVA,8BACAA,iCAGUC,EAAAA,0BAAAA,qDAIVA,wBAEAA,uFCWF,SAASE,EAAYC,OACbC,EAAwB,UAC9BC,OAAOC,KAAKH,GAAOI,SAAQ,SAACC,GAEtBP,EAAuBQ,SAASD,KAIlCA,EAAIE,WAAW,MACfT,EAAuBQ,SAASD,EAAIG,QAAQ,MAAO,KAEnDP,EAAiBI,EAAIG,QAAQ,MAAO,KAAOR,EAAMK,GAEjDJ,EAAiBI,GAAOL,EAAMK,OAG3BJ,WASOQ,SACdC,IAAAA,MACAC,IAAAA,gBACAC,QAAAA,aAAU,eACLC,IAALC,WAOO,IAAIC,SAGT,SAACC,EAASC,MAEU,oBAAXC,aACuB,IAAvBA,OAAOC,mBAEPF,EAAO,CACZG,MAAO,kBACPC,QACE,yEAIAP,EACJD,GAC4B,oBAApBS,iBACN,IAAIA,gBAAgBJ,OAAOK,SAASC,QAAQC,IAAI,oBAE/CX,SACCJ,GACFgB,QAAQN,4DACHH,EAAO,CACZG,MAAO,cACPC,QAAS,iEAGTX,GAAOgB,QAAQC,aAAab,6BAA8BA,GAE9Dc,EAAKC,OAAO,CACVC,IAAKhB,EACLiB,IAAKb,OAAOK,SAASS,KAAKC,WAC1BC,WAAY,CACVC,OAAO,EACPC,QAAQ,GAEVpC,MAAO,CACLqC,YAAa,CACXC,KAAM,oBAIiB,IAAlBpB,OAAOqB,OAAwB,KAChCF,EAAyCnB,OAAOqB,OAAhDF,YACJ3B,GACFgB,QAAQC,aAAab,+BAAiCH,GAExD0B,EAAYvB,EAAKH,GAAa6B,MAAK,SAACC,OACnB,IAAXA,EAAiB,OAMfvB,OAAOqB,OAJAG,IAAT9B,QACa+B,IACbC,OACGC,SAGDnC,GACFgB,QAAQC,aAAab,2BAA6B+B,GACpDH,GAAc,SAACI,OAIRC,IACDD,KACApC,GACFgB,QAAQC,aAAab,uBAAyBiC,GACpB,kBAAjBD,EAAEE,YAEPJ,EADJE,EAAEE,WACS,CAAEZ,OAAQ,OAAQD,MAAO,QACzB,CAAEC,OAAQ,OAAQD,MAAO,SAEtCvB,EAAQb,EAAYgD,OAGlBrC,GAAOgB,QAAQC,aAAab,mBAChCF,EAAQb,EAAY8C,IACpB7B,EAAQ,CAAEyB,OAAQ,KAAMzC,MAAOD,EAAY8C,UAEvCnC,GACFgB,QAAQC,aAAab,oCAAsC2B,GAC7DzB,EAAQ,CAAEyB,OAAQ,uBAIlB/B,GAAOgB,QAAQN,+CACnBH,EAAO,CACLG,MAAO,uBACPC,QACE,qFAMK,CAAEZ,KAAAA"}