import { ExtensionDialogProps } from './base';
export { ExtensionDialogProps, reservedExtensionProps } from './base';
import type { FieldExtensionDeclaration, FieldExtensionProps } from './field';
import type { FormSidebarExtensionDeclaration, FormSidebarExtensionProps } from './formSidebar';
export type { FormSidebarExtensionDeclaration, FormSidebarExtensionProps, } from './formSidebar';
export type { FormState, FieldState, FieldSubscription, Subscriber, FormSubscription, } from './type-helpers/form';
export type { FieldExtensionDeclaration, FieldExtensionProps, VisibilityMap } from './field';
export { FieldExtensionFeature, FieldExtensionType, VisibilityTypes } from './field';
export declare type ExtensionProps = FieldExtensionProps | FormSidebarExtensionProps | ExtensionDialogProps;
declare type Xprops = {
    onProps: (props: Record<string, any>) => void;
    onConnected: (uid: string, declaration: ExtensionDeclaration) => Promise<unknown>;
    resize: (size: {
        height: 'auto' | 'full' | number;
        width: 'auto' | '100%' | number;
    }) => unknown;
} & ExtensionProps;
declare global {
    interface Window {
        xprops: Xprops;
    }
}
export declare type ExtensionDeclaration = FieldExtensionDeclaration | FormSidebarExtensionDeclaration;
export declare type DeclarationRelativeProps<T> = T extends FieldExtensionDeclaration ? FieldExtensionProps : T extends FormSidebarExtensionDeclaration ? FormSidebarExtensionProps : ExtensionProps;
export declare function init<Declaration>({ debug, declaration, onProps, uid: givenUid, }: {
    declaration: ExtensionDeclaration;
    onProps: (props: ExtensionProps) => unknown;
    debug?: boolean;
    uid?: string;
}): Promise<{
    status: 'ok';
    props: DeclarationRelativeProps<Declaration>;
} | {
    status: 'validation';
}>;
declare const _default: {
    init: typeof init;
};
export default _default;
