export declare const reservedExtensionProps: string[];
export declare enum ExtensionPermission {
    INPUT = "INPUT",
    FORM = "FORM",
    API = "API"
}
export interface IExtensionDeclaration {
    name: string;
    description?: string;
    permissions?: ExtensionPermission[];
    config?: Record<ConfigVariableName, ConfigVariableSettings>;
}
declare type ConfigVariableName = string;
declare type ConfigVariableSettings = {
    type: 'string' | 'number' | 'boolean';
    displayName?: string;
    description?: string;
    required?: boolean;
    defaultValue?: any;
};
export declare type ConfigFields = Record<ConfigVariableName, ConfigVariableSettings>;
export interface ExtensionPropsBase {
    extension: {
        config: Record<string, any>;
        status: 'connected' | 'connecting' | 'error' | 'disconnected';
    };
    isExpanded: boolean;
    expand: (expand: boolean | ((isExpanded: boolean) => boolean)) => unknown;
    context: {
        project: {
            id: string;
            name: string;
            mgmtApi: string;
            mgmtToken: string;
        };
        environment: {
            id: string;
            name: string;
            endpoint: string;
            authToken: string;
        };
    };
    openDialog: <DialogReturn = any, DialogProps = Record<string, any>>(src: string, props?: {
        disableOverlayClick?: boolean;
        maxWidth?: string;
        ariaLabel?: string;
    } & DialogProps) => Promise<DialogReturn | null>;
}
export interface ExtensionDialogProps extends ExtensionPropsBase {
    onCloseDialog: (value: any) => void;
}
export {};
