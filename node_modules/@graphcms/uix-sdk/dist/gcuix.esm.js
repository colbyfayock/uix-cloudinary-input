import zoid from '@graphcms/zoid/lib/zoid.js';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

// see https://github.com/krakenjs/zoid/blob/master/src/component/props.js#L53
var reservedExtensionProps = ['timeout', 'window', 'close', 'focus', 'resize', 'uid', 'cspNonce', 'getParent', 'getParentDomain', 'hide', 'show', 'export', 'onDisplay', 'onRendered', 'onRender', 'onClose', 'onDestroy', 'onResize', 'onFocus', 'onError', 'onProps'];
var ExtensionPermission;

(function (ExtensionPermission) {
  ExtensionPermission["INPUT"] = "INPUT";
  ExtensionPermission["FORM"] = "FORM";
  ExtensionPermission["API"] = "API";
})(ExtensionPermission || (ExtensionPermission = {}));

var FieldExtensionType;

(function (FieldExtensionType) {
  FieldExtensionType["STRING"] = "STRING";
  FieldExtensionType["RICHTEXT"] = "RICHTEXT";
  FieldExtensionType["INT"] = "INT";
  FieldExtensionType["FLOAT"] = "FLOAT";
  FieldExtensionType["BOOLEAN"] = "BOOLEAN";
  FieldExtensionType["JSON"] = "JSON";
  FieldExtensionType["DATETIME"] = "DATETIME";
  FieldExtensionType["DATE"] = "DATE";
  FieldExtensionType["LOCATION"] = "LOCATION";
  FieldExtensionType["COLOR"] = "COLOR";
  FieldExtensionType["ENUMERATION"] = "ENUMERATION";
  FieldExtensionType["RELATION"] = "RELATION";
  FieldExtensionType["ASSET"] = "ASSET";
  FieldExtensionType["UNION"] = "UNION";
})(FieldExtensionType || (FieldExtensionType = {}));

var FieldExtensionFeature;

(function (FieldExtensionFeature) {
  FieldExtensionFeature["FieldRenderer"] = "FieldRenderer";
  FieldExtensionFeature["ListRenderer"] = "ListRenderer";
  FieldExtensionFeature["TableRenderer"] = "TableRenderer";
})(FieldExtensionFeature || (FieldExtensionFeature = {}));

var VisibilityTypes;

(function (VisibilityTypes) {
  /** Field can be read and edited */
  VisibilityTypes["READ_WRITE"] = "READ_WRITE";
  /** Field is shown but can't be edited in the UI, only through the API */

  VisibilityTypes["READ_ONLY"] = "READ_ONLY";
  /** Field is not shown, but can be used by other fields */

  VisibilityTypes["HIDDEN"] = "HIDDEN";
})(VisibilityTypes || (VisibilityTypes = {}));

var _excluded = ["onProps", "onConnected", "resize"],
    _excluded2 = ["onProps", "onConnected"];

function handleProps(props) {
  var transformedProps = {};
  Object.keys(props).forEach(function (key) {
    // do not pass down zoid props to the extension
    if (reservedExtensionProps.includes(key)) return; // transform props that were prefixed with '_' to bypass zoid reverved porps

    if (key.startsWith('_') && reservedExtensionProps.includes(key.replace(/^_/g, ''))) {
      transformedProps[key.replace(/^_/g, '')] = props[key];
    } else {
      transformedProps[key] = props[key];
    }
  });
  return transformedProps;
}

function init(_ref) {
  var debug = _ref.debug,
      declaration = _ref.declaration,
      _ref$onProps = _ref.onProps,
      onProps = _ref$onProps === void 0 ? function () {
    return undefined;
  } : _ref$onProps,
      givenUid = _ref.uid;
  return new Promise(function (resolve, reject) {
    if (typeof window === 'undefined' || typeof window.postMessage === 'undefined') {
      return reject({
        error: 'unsupported_env',
        message: 'Unsupported environment: Not in a browser supporting PostMessage'
      });
    }

    var uid = givenUid || typeof URLSearchParams !== 'undefined' && new URLSearchParams(window.location.search).get('extensionUid');

    if (!uid) {
      if (debug) console.error("[UIX] no uid found in init params or extension URL");
      return reject({
        error: 'missing_uid',
        message: 'Missing UID: no UID found in init params or extension URL'
      });
    }

    if (debug) console.info("[UIX:" + uid + "] initializing with uid " + uid);
    zoid.create({
      tag: uid,
      url: window.location.href.toString(),
      autoResize: {
        width: false,
        height: true
      },
      props: {
        onConnected: {
          type: 'function'
        }
      }
    });

    if (typeof window.xprops !== 'undefined') {
      var _window$xprops = window.xprops,
          onConnected = _window$xprops.onConnected;

      if (debug) {
        console.info("[UIX:" + uid + "] transmitting declaration", declaration);
      }

      onConnected(uid, declaration).then(function (status) {
        if (status === true) {
          var _window$xprops2 = window.xprops,
              onParentProps = _window$xprops2.onProps,
              resize = _window$xprops2.resize,
              extensionProps = _objectWithoutPropertiesLoose(_window$xprops2, _excluded);

          if (debug) console.info("[UIX:" + uid + "] initial shared props", extensionProps);
          onParentProps(function (p) {
            var newExtensionProps = _objectWithoutPropertiesLoose(p, _excluded2);

            if (debug) console.info("[UIX:" + uid + "] new shared props", newExtensionProps);

            if (typeof p.isExpanded === 'boolean') {
              p.isExpanded ? resize({
                height: 'full',
                width: '100%'
              }) : resize({
                height: 'auto',
                width: '100%'
              });
            }

            onProps(handleProps(newExtensionProps));
          });
          if (debug) console.info("[UIX:" + uid + "] initialized");
          onProps(handleProps(extensionProps));
          resolve({
            status: 'ok',
            props: handleProps(extensionProps)
          });
        } else {
          if (debug) console.info("[UIX:" + uid + "] sdk renderer returned status:", status);
          resolve({
            status: 'validation'
          });
        }
      });
    } else {
      if (debug) console.error("[UIX] no shared props from host found");
      reject({
        error: 'failed_communication',
        message: 'No communication established with host, please check your URL'
      });
    }
  });
}
var index = {
  init: init
};

export default index;
export { FieldExtensionFeature, FieldExtensionType, VisibilityTypes, init, reservedExtensionProps };
//# sourceMappingURL=gcuix.esm.js.map
