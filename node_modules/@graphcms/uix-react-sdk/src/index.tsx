import * as React from "react";
import type { FocusEvent, ChangeEvent } from "react";

import type {
  ExtensionDeclaration,
  ExtensionDialogProps,
  FieldExtensionProps as FieldExtensionPropsBase,
  FormSidebarExtensionProps,
  FieldExtensionDeclaration,
  FormSidebarExtensionDeclaration,
  ExtensionProps,
} from "@graphcms/uix-sdk";

import { init } from "@graphcms/uix-sdk";

export * from "@graphcms/uix-sdk";

export interface FieldExtensionProps
  extends Omit<FieldExtensionPropsBase, "onBlur" | "onChange" | "onFocus"> {
  onBlur: <T extends HTMLElement = HTMLElement>(
    event?: FocusEvent<T>
  ) => Promise<void>;

  onChange: <T extends HTMLElement = HTMLElement>(
    event: ChangeEvent<T> | any
  ) => Promise<void>;

  onFocus: <T extends HTMLElement = HTMLElement>(
    event?: FocusEvent<T>
  ) => Promise<void>;
}
export type DeclarationRelativeProps<T> = T extends FieldExtensionDeclaration
  ? FieldExtensionProps
  : T extends FormSidebarExtensionDeclaration
  ? FormSidebarExtensionProps
  : ExtensionProps;

type ExtensionContextType =
  | FieldExtensionProps
  | FormSidebarExtensionProps
  | (ExtensionDialogProps & Record<string, unknown>);

const ExtensionContext = React.createContext<ExtensionContextType>(
  {} as ExtensionContextType
);

export function useUiExtension<Declaration extends ExtensionDeclaration>() {
  return React.useContext(
    ExtensionContext
  ) as DeclarationRelativeProps<Declaration>;
}

export function useUiExtensionDialog<
  DialogReturn = any,
  DialogProps = Record<string, unknown>
>() {
  return React.useContext(ExtensionContext) as {
    onCloseDialog: (value?: DialogReturn | null) => void;
  } & DialogProps;
}

export type WrapperProps = {
  uid?: string;
  declaration: ExtensionDeclaration;
  fallback?: React.FC<{ state: ExtensionState }>;
  debug?: boolean;
};

export type ExtensionState = "init" | "error" | "ok" | "validation";

export const Wrapper: React.FC<WrapperProps> = function Wrapper(props) {
  const {
    children,
    uid,
    declaration,
    fallback = ({ state }) => (
      <p>
        {state === "error"
          ? "SDK connection error, check logs"
          : "Waiting for connection"}
      </p>
    ),
    debug,
  } = props;

  const [extensionProps, setExtensionProps] = React.useState<
    ExtensionContextType | undefined
  >(undefined);

  const [extensionState, setExtensionState] = React.useState<ExtensionState>(
    "init"
  );

  const FallbackComponent = fallback;

  React.useEffect(() => {
    async function initSdk() {
      try {
        const initialState = await init({
          uid,
          debug,
          declaration,
          onProps: (props) => setExtensionProps(props),
        });
        if (initialState.status === "ok") {
          setExtensionProps(initialState.props);
        }
        setExtensionState(initialState.status);
      } catch (error) {
        setExtensionState("error");
        console.error(error);
      }
    }
    initSdk();
  }, [uid]);

  return extensionState !== "ok" ? (
    <FallbackComponent state={extensionState} />
  ) : (
    <ExtensionContext.Provider value={extensionProps!} children={children} />
  );
};
