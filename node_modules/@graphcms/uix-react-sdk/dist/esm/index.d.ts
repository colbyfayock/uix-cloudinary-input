import * as React from "react";
import type { FocusEvent, ChangeEvent } from "react";
import type { ExtensionDeclaration, FieldExtensionProps as FieldExtensionPropsBase, FormSidebarExtensionProps, FieldExtensionDeclaration, FormSidebarExtensionDeclaration, ExtensionProps } from "@graphcms/uix-sdk";
export * from "@graphcms/uix-sdk";
export interface FieldExtensionProps extends Omit<FieldExtensionPropsBase, "onBlur" | "onChange" | "onFocus"> {
    onBlur: <T extends HTMLElement = HTMLElement>(event?: FocusEvent<T>) => Promise<void>;
    onChange: <T extends HTMLElement = HTMLElement>(event: ChangeEvent<T> | any) => Promise<void>;
    onFocus: <T extends HTMLElement = HTMLElement>(event?: FocusEvent<T>) => Promise<void>;
}
export declare type DeclarationRelativeProps<T> = T extends FieldExtensionDeclaration ? FieldExtensionProps : T extends FormSidebarExtensionDeclaration ? FormSidebarExtensionProps : ExtensionProps;
export declare function useUiExtension<Declaration extends ExtensionDeclaration>(): DeclarationRelativeProps<Declaration>;
export declare function useUiExtensionDialog<DialogReturn = any, DialogProps = Record<string, unknown>>(): {
    onCloseDialog: (value?: DialogReturn | null | undefined) => void;
} & DialogProps;
export declare type WrapperProps = {
    uid?: string;
    declaration: ExtensionDeclaration;
    fallback?: React.FC<{
        state: ExtensionState;
    }>;
    debug?: boolean;
};
export declare type ExtensionState = "init" | "error" | "ok" | "validation";
export declare const Wrapper: React.FC<WrapperProps>;
